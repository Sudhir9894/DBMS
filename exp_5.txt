-- Create the 'customer' table
CREATE TABLE customer (
    id INT AUTO_INCREMENT PRIMARY KEY,
    customer_name VARCHAR(55),
    account INT,
    email VARCHAR(55)
);

-- Create the 'balance' table
CREATE TABLE balance (
    id INT AUTO_INCREMENT PRIMARY KEY,
    account INT,
    balance FLOAT(10,2)
);

-- Insert data into the 'customer' table
INSERT INTO customer(customer_name, account, email)
VALUES 
    ('Stephen', 1030, 'stephen@javatpoint.com'), 
    ('Jenifer', 2035, 'jenifer@javatpoint.com'), 
    ('Mathew', 5564, 'mathew@javatpoint.com'), 
    ('Smith', 4534, 'smith@javatpoint.com'), 
    ('David', 7648, 'david@javatpoint.com');

-- Insert data into the 'balance' table
INSERT INTO balance(account, balance)
VALUES 
    (1030, 50000.00), 
    (2035, 230000.00), 
    (5564, 125000.00), 
    (4534, 80000.00), 
    (7648, 45000.00);

-- Output the 'customer' table data
SELECT * FROM customer;
-- Output:
-- id | customer_name | account | email
-- -----------------------------------------------
-- 1  | Stephen       | 1030    | stephen@javatpoint.com
-- 2  | Jenifer       | 2035    | jenifer@javatpoint.com
-- 3  | Mathew        | 5564    | mathew@javatpoint.com
-- 4  | Smith         | 4534    | smith@javatpoint.com
-- 5  | David         | 7648    | david@javatpoint.com

-- Output the 'balance' table data
SELECT * FROM balance;
-- Output:
-- id | account | balance
-- ---------------------------
-- 1  | 1030    | 50000
-- 2  | 2035    | 230000
-- 3  | 5564    | 125000
-- 4  | 4534    | 80000
-- 5  | 7648    | 45000

-- Perform an INNER JOIN (Equi JOIN) between 'customer' and 'balance' tables
SELECT customer.customer_name, customer.account, balance.balance
FROM customer
JOIN balance ON customer.account = balance.account;
-- Output:
-- customer_name | account | balance
-- --------------------------------------
-- Stephen       | 1030    | 50000
-- Jenifer       | 2035    | 230000
-- Mathew        | 5564    | 125000
-- Smith         | 4534    | 80000
-- David         | 7648    | 45000

-- Perform a Non-Equi JOIN (student.id < record.id)
SELECT student.name, record.id, record.city
FROM student, record
WHERE student.id < record.id;
-- Example Output:
-- name   | id  | city
-- ----------------------
-- Hina   | 9   | Delhi
-- Megha  | 9   | Delhi
-- Gouri  | 9   | Delhi
-- Hina   | 10  | Delhi
-- Megha  | 10  | Delhi
-- Gouri  | 10  | Delhi
-- Hina   | 12  | Delhi
-- Megha  | 12  | Delhi
-- Gouri  | 12  | Delhi

-- Create the 'students' table
CREATE TABLE students (
    id INTEGER,
    name TEXT NOT NULL,
    gender TEXT
);

-- Insert data into the 'students' table
INSERT INTO students VALUES (1, 'Ryan', 'M');
INSERT INTO students VALUES (2, 'Joanna', 'F');
INSERT INTO students VALUES (3, 'Moana', 'F');

-- Create the 'college' table
CREATE TABLE college (
    id INTEGER,
    classTeacher TEXT NOT NULL,
    Strength TEXT NOT NULL
);

-- Insert data into the 'college' table
INSERT INTO college VALUES (1, 'Alpha', '50');
INSERT INTO college VALUES (2, 'Romeo', '60');
INSERT INTO college VALUES (3, 'Charlie', '55');

-- Perform a FULL OUTER JOIN between 'students' and 'college'
SELECT college.classTeacher, students.id
FROM college
FULL OUTER JOIN students ON college.id = students.id
ORDER BY college.classTeacher;
-- Output:
-- classTeacher | id
-- ---------------------
-- Alpha        | 1
-- Romeo        | 2
-- Charlie      | 3
