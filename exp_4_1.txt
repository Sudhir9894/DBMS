-- Create the CUSTOMERS table
CREATE TABLE CUSTOMERS (
    ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    AGE INT NOT NULL,
    ADDRESS CHAR(25),
    SALARY DECIMAL(18, 2),
    PRIMARY KEY (ID)
);

-- Insert data into the CUSTOMERS table
INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00);

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00);

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (3, 'Kaushik', 23, 'Kota', 2000.00);

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00);

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00);

INSERT INTO CUSTOMERS (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (6, 'Komal', 22, 'MP', 4500.00);

-- Create the CUSTOMERS_BKP table (Backup of CUSTOMERS)
CREATE TABLE CUSTOMERS_BKP (
    ID INT NOT NULL,
    NAME VARCHAR(20) NOT NULL,
    AGE INT NOT NULL,
    ADDRESS CHAR(25),
    SALARY DECIMAL(18, 2),
    PRIMARY KEY (ID)
);

-- Insert data into the CUSTOMERS_BKP table
INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00);

INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00);

INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (3, 'Kaushik', 23, 'Kota', 2000.00);

INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00);

INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00);

INSERT INTO CUSTOMERS_BKP (ID, NAME, AGE, ADDRESS, SALARY) 
VALUES (6, 'Komal', 22, 'MP', 4500.00);

-- Create the ORDERS table
CREATE TABLE ORDERS (
    OID INT PRIMARY KEY,
    DATE DATE,
    CUSTOMER_ID INT,
    AMOUNT DECIMAL(10, 2),
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(ID)
);

-- Insert data into the ORDERS table
INSERT INTO ORDERS (OID, DATE, CUSTOMER_ID, AMOUNT) 
VALUES (102, '2009-10-08', 3, 3000);

INSERT INTO ORDERS (OID, DATE, CUSTOMER_ID, AMOUNT) 
VALUES (100, '2009-10-08', 3, 1500);

INSERT INTO ORDERS (OID, DATE, CUSTOMER_ID, AMOUNT) 
VALUES (101, '2009-11-20', 2, 1560);

INSERT INTO ORDERS (OID, DATE, CUSTOMER_ID, AMOUNT) 
VALUES (103, '2008-05-20', 4, 2060);

-- Select data from CUSTOMERS with subquery
SELECT * FROM CUSTOMERS 
WHERE ID IN (SELECT ID FROM CUSTOMERS WHERE SALARY > 4500);

-- Subquery with UPDATE command
UPDATE CUSTOMERS 
SET SALARY = SALARY * 0.25 
WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP WHERE AGE >= 27);

-- Subquery with DELETE command
DELETE FROM CUSTOMERS 
WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP WHERE AGE >= 27);

-- Simple JOIN between CUSTOMERS and ORDERS
SELECT ID, NAME, AGE, AMOUNT 
FROM CUSTOMERS, ORDERS 
WHERE CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

-- INNER JOIN between CUSTOMERS and ORDERS
SELECT ID, NAME, AMOUNT, DATE 
FROM CUSTOMERS 
INNER JOIN ORDERS 
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

-- LEFT JOIN between CUSTOMERS and ORDERS
SELECT ID, NAME, AMOUNT, DATE 
FROM CUSTOMERS 
LEFT JOIN ORDERS 
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

-- RIGHT JOIN between CUSTOMERS and ORDERS
SELECT ID, NAME, AMOUNT, DATE 
FROM CUSTOMERS 
RIGHT JOIN ORDERS 
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

-- FULL JOIN between CUSTOMERS and ORDERS
SELECT ID, NAME, AMOUNT, DATE 
FROM CUSTOMERS 
FULL JOIN ORDERS 
ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

-- SELF JOIN to compare customers with lower salaries than others
SELECT a.ID, b.NAME, a.SALARY 
FROM CUSTOMERS a, CUSTOMERS b 
WHERE a.SALARY < b.SALARY;
